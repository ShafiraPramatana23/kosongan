package com.fidilaundry.app.utilimport java.math.RoundingModeimport java.text.DecimalFormatimport java.text.DecimalFormatSymbolsimport java.text.NumberFormatobject RupiahCurrency {    fun Converter(value: Double?): String {        val kursIndonesia: DecimalFormat = DecimalFormat.getCurrencyInstance() as DecimalFormat        val formatRp = DecimalFormatSymbols()        formatRp.currencySymbol = "Rp. "        formatRp.monetaryDecimalSeparator = ','        formatRp.groupingSeparator = '.'        kursIndonesia.decimalFormatSymbols = formatRp        return kursIndonesia.format(value)    }    fun ConverterTrade(value: Double?): String {        val kursIndonesia: DecimalFormat = DecimalFormat.getCurrencyInstance() as DecimalFormat        val formatRp = DecimalFormatSymbols()        formatRp.currencySymbol = "Rp. "        formatRp.monetaryDecimalSeparator = ','        formatRp.groupingSeparator = '.'        kursIndonesia.decimalFormatSymbols = formatRp        kursIndonesia.minimumFractionDigits = 2        kursIndonesia.maximumFractionDigits = 4//        kursIndonesia.roundingMode = RoundingMode.DOWN        return kursIndonesia.format(value)    }    fun ConverterRp(value: Double?): String {        val kursIndonesia: DecimalFormat = DecimalFormat.getCurrencyInstance() as DecimalFormat        val formatRp = DecimalFormatSymbols()        formatRp.currencySymbol = "Rp"        formatRp.groupingSeparator = '.'        kursIndonesia.decimalFormatSymbols = formatRp        val formated = kursIndonesia.format(value)        return formated.substring(0, formated.length - 3)    }    fun ConverterIDR(value: Double?): String {        val kursIndonesia: DecimalFormat = DecimalFormat.getCurrencyInstance() as DecimalFormat        val formatRp = DecimalFormatSymbols()        formatRp.currencySymbol = "IDR "        formatRp.monetaryDecimalSeparator = ','        formatRp.groupingSeparator = '.'        kursIndonesia.decimalFormatSymbols = formatRp        return kursIndonesia.format(value)    }    fun ConverterReport(value: Double?): String {        val kursIndonesia: DecimalFormat = DecimalFormat.getCurrencyInstance() as DecimalFormat        val formatRp = DecimalFormatSymbols()        formatRp.currencySymbol = "Rp. "        formatRp.monetaryDecimalSeparator = ','        formatRp.groupingSeparator = '.'        kursIndonesia.minimumFractionDigits = 2        kursIndonesia.maximumFractionDigits = 3        kursIndonesia.decimalFormatSymbols = formatRp        return kursIndonesia.format(value)    }    fun ConverterTax(value: Double?): String {        val kursIndonesia: DecimalFormat = DecimalFormat.getCurrencyInstance() as DecimalFormat        val formatRp = DecimalFormatSymbols()        formatRp.currencySymbol = "Rp. "        formatRp.monetaryDecimalSeparator = ','        formatRp.groupingSeparator = '.'        kursIndonesia.minimumFractionDigits = 2        kursIndonesia.maximumFractionDigits = 3        kursIndonesia.decimalFormatSymbols = formatRp        kursIndonesia.roundingMode = RoundingMode.DOWN        return kursIndonesia.format(value)    }    fun removeCurrency(value: String): Double {        var newVar = value.split(",")[0]        newVar = newVar.replace("Rp. ","")        newVar = newVar.replace(".","")        newVar = newVar.replace(",","")        return NumberFormat.getInstance().parse(newVar).toDouble()    }}