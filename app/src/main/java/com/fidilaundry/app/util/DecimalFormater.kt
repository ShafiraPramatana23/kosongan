package com.fidilaundry.app.utilimport java.math.BigDecimalimport java.math.RoundingModeimport java.text.DecimalFormatimport java.text.DecimalFormatSymbolsimport java.util.*object DecimalFormater {    fun Converter(value: Double?): String {        val df = DecimalFormat("#.##")        return when {            value != null -> {                df.format(value)            }            else -> {                ""            }        }    }    fun ConverterDouble(number: Double?): Double {        val symbols = DecimalFormatSymbols(Locale.US)        val df = DecimalFormat("#.##", symbols)        return df.format(number).toDouble()    }    fun ConverterDoubleRmv(number: Double?): String {        val symbols = DecimalFormatSymbols(Locale.US)        val df = DecimalFormat("0.##", symbols)        return df.format(number)    }    fun ConverterHoldings(number: Double?): Double {        val symbols = DecimalFormatSymbols(Locale.US)        val df = DecimalFormat("#.###", symbols)        return df.format(number).toDouble()    }    fun ConverterDepth(number: Double?): Double {        val symbols = DecimalFormatSymbols(Locale.US)        val df = DecimalFormat("#.####", symbols)        return df.format(number).toDouble()    }    fun ConverterOhlc(number: Double?): Double {        val symbols = DecimalFormatSymbols(Locale.US)        val df = DecimalFormat("#.##", symbols)        df.roundingMode = RoundingMode.DOWN        return df.format(number).toDouble()    }    fun ConverterBigDecimal(number: Double?, coma: Int, mode: RoundingMode): String? {        return BigDecimal.valueOf(number!!).setScale(coma, mode).toString()    }}